
装饰模式
一个抽象类具有很多的属性，属性采用一个抽象类代表，使用继承的方式装饰一个抽象类生成一个实体类。
那么这个实体类就装饰了最高层的抽象类。


Flyweight模式
采用共享对象的方法，复用对象，为用户服务。
为了能够复用，对象必须能够被保存。
可以采用HashMap的形式，用关键字保存对象，需要的时候取出来。

Bridge 模式
桥接，是为了降低耦合。
将实体和实体的实现方法分离开来。
一个抽象类代表一个实体，一个接口代表实体的动作，抽象类中包含接口的引用。
使用时，继承并创建抽象类的实例，传递接口的实例进去，那么，实体就能利用接口的方法动作起来。

Adapter 模式
适配两个接口，降低耦合性。
如果一个接口需要实现另一个接口的功能，只需添加适配器到实例中即可。

